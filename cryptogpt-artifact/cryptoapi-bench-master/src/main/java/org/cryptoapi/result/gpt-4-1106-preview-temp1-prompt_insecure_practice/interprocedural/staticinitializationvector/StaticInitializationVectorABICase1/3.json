[{
    "misuse": "Insecure Initialization Vector (IV)",
    "vulnerable_code": "IvParameterSpec ivSpec = new IvParameterSpec(bytes);",
    "description": "The IV is not generated using a secure random number generator. Instead, it is derived from a constant string which can lead to predictable IVs.",
    "recommendation": "Use a SecureRandom instance to generate a random IV instead of using constant strings or predictable values."
}, {
    "misuse": "Insufficient Key Size",
    "vulnerable_code": "KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\nSecretKey key = keyGen.generateKey();",
    "description": "The key generator does not specify a key size. This can lead to generating keys with a default and potentially weak size, such as 128 bits for AES.",
    "recommendation": "Specify an explicit key size for key generation, preferably 256 bits for AES."
}, {
    "misuse": "Hardcoded Encryption Key",
    "vulnerable_code": "SecretKey key = keyGen.generateKey();",
    "description": "The encryption key is generated within the code and not protected, making it potentially accessible and static if the code is observed or reverse-engineered.",
    "recommendation": "Use a secure way to manage encryption keys, such as a key management service or storing them securely outside of the codebase."
}, {
    "misuse": "Missing Secure Random for Key Generation",
    "vulnerable_code": "KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");",
    "description": "KeyGenerator does not explicitly use a SecureRandom instance, and thus may not be adequately seeded in all circumstances, leading to less random keys.",
    "recommendation": "Instantiate SecureRandom with a strong source of randomness and pass it to KeyGenerator.init method with a given key size."
}]